# Generated by Grammarinator 23.7.post31+g3f15e2c.d20231108

import itertools

from math import inf
from grammarinator.runtime import *

class BabyCobolGenerator(Generator):


    def EOF(self, parent=None):
        pass
    EOF.min_size = RuleSize(0, 0)

    def program(self, parent=None):
        with UnparserRuleContext(self, 'program', parent) as current:
            self._reserve(6, self.identification_division, parent=current)
            with QuantifierContext(self, 0, 0, 1, RuleSize(2, 2), 6) as quant0:
                while quant0(current):
                    self.data_division(parent=current)
            self.procedure_division(parent=current)
            return current
    program.min_size = RuleSize(6, 10)

    def identification_division(self, parent=None):
        with UnparserRuleContext(self, 'identification_division', parent) as current:
            self._reserve(3, self.T__0, parent=current)
            self._reserve(2, self.T__1, parent=current)
            with QuantifierContext(self, 0, 1, inf, RuleSize(2, 2), 0) as quant0:
                while quant0(current):
                    with AlternationContext(self, 0, (RuleSize(2, 3), RuleSize(2, 2)), 0, (1, 1)) as alt0:
                        choice0 = alt0(current)
                        if choice0 == 0:
                            self._reserve(1, self.copy, parent=current)
                            self.T__1(parent=current)
                        elif choice0 == 1:
                            self.identification_name_value_pair(parent=current)
            return current
    identification_division.min_size = RuleSize(2, 4)

    def identification_name_value_pair(self, parent=None):
        with UnparserRuleContext(self, 'identification_name_value_pair', parent) as current:
            with QuantifierContext(self, 0, 1, inf, RuleSize(0, 0), 2) as quant0:
                while quant0(current):
                    with AlternationContext(self, 0, (RuleSize(0, 0), RuleSize(1, 1)), 0, (1, 1)) as alt0:
                        choice0 = alt0(current)
                        if choice0 == 0:
                            current.src += self._model.charset(current, 0, self._charsets[7])
                        elif choice0 == 1:
                            self.T__2(parent=current)
            self._reserve(1, self.T__1, parent=current)
            with QuantifierContext(self, 1, 1, inf, RuleSize(0, 0), 1) as quant1:
                while quant1(current):
                    with AlternationContext(self, 1, (RuleSize(0, 0), RuleSize(1, 1)), 0, (1, 1)) as alt1:
                        choice1 = alt1(current)
                        if choice1 == 0:
                            current.src += self._model.charset(current, 1, self._charsets[7])
                        elif choice1 == 1:
                            self.T__2(parent=current)
            self.T__1(parent=current)
            return current
    identification_name_value_pair.min_size = RuleSize(1, 2)

    def data_division(self, parent=None):
        with UnparserRuleContext(self, 'data_division', parent) as current:
            self._reserve(1, self.T__3, parent=current)
            self.T__1(parent=current)
            with QuantifierContext(self, 0, 0, inf, RuleSize(2, 2), 0) as quant0:
                while quant0(current):
                    with AlternationContext(self, 0, (RuleSize(2, 3), RuleSize(2, 2)), 0, (1, 1)) as alt0:
                        [self.data_division_definition, self.copy][alt0(current)](parent=current)
            return current
    data_division.min_size = RuleSize(1, 2)

    def data_division_definition(self, parent=None):
        with UnparserRuleContext(self, 'data_division_definition', parent) as current:
            self._reserve(2, self.NUM_LITERAL, parent=current)
            self._reserve(1, self.WORD, parent=current)
            with QuantifierContext(self, 0, 0, 1, RuleSize(3, 2), 1) as quant0:
                while quant0(current):
                    self.picture_or_like(parent=current)
            with QuantifierContext(self, 1, 0, 1, RuleSize(2, 3), 1) as quant1:
                while quant1(current):
                    self.occurs_clause(parent=current)
            self.T__1(parent=current)
            return current
    data_division_definition.min_size = RuleSize(1, 3)

    def picture_or_like(self, parent=None):
        with UnparserRuleContext(self, 'picture_or_like', parent) as current:
            with AlternationContext(self, 0, (RuleSize(2, 2), RuleSize(3, 2)), 0, (1, 1)) as alt0:
                [self.picture, self.like][alt0(current)](parent=current)
            return current
    picture_or_like.min_size = RuleSize(2, 2)

    def picture(self, parent=None):
        with UnparserRuleContext(self, 'picture', parent) as current:
            self._reserve(1, self.T__4, parent=current)
            self.STR_LITERAL(parent=current)
            return current
    picture.min_size = RuleSize(1, 2)

    def like(self, parent=None):
        with UnparserRuleContext(self, 'like', parent) as current:
            self._reserve(1, self.T__5, parent=current)
            self.identifier(parent=current)
            return current
    like.min_size = RuleSize(2, 2)

    def occurs_clause(self, parent=None):
        with UnparserRuleContext(self, 'occurs_clause', parent) as current:
            self._reserve(2, self.T__6, parent=current)
            self._reserve(1, self.NUM_LITERAL, parent=current)
            self.T__7(parent=current)
            return current
    occurs_clause.min_size = RuleSize(1, 3)

    def procedure_division(self, parent=None):
        with UnparserRuleContext(self, 'procedure_division', parent) as current:
            self._reserve(5, self.T__8, parent=current)
            with QuantifierContext(self, 0, 0, 1, RuleSize(4, 3), 5) as quant0:
                while quant0(current):
                    self.using(parent=current)
            self._reserve(4, self.T__1, parent=current)
            with QuantifierContext(self, 1, 0, inf, RuleSize(4, 2), 4) as quant1:
                while quant1(current):
                    self.sentence(parent=current)
            with QuantifierContext(self, 2, 1, inf, RuleSize(5, 4), 0) as quant2:
                while quant2(current):
                    self.paragraph(parent=current)
            return current
    procedure_division.min_size = RuleSize(5, 6)

    def using(self, parent=None):
        with UnparserRuleContext(self, 'using', parent) as current:
            self._reserve(2, self.T__9, parent=current)
            with QuantifierContext(self, 0, 1, inf, RuleSize(3, 2), 0) as quant0:
                while quant0(current):
                    self.using_specifier(parent=current)
            return current
    using.min_size = RuleSize(3, 3)

    def using_specifier(self, parent=None):
        with UnparserRuleContext(self, 'using_specifier', parent) as current:
            with AlternationContext(self, 0, (RuleSize(2, 2), RuleSize(5, 2), RuleSize(5, 2)), 0, (1, 1, 1)) as alt0:
                [self.by_reference_clause, self.by_content_clause, self.by_value_clause][alt0(current)](parent=current)
            return current
    using_specifier.min_size = RuleSize(2, 2)

    def by_reference_clause(self, parent=None):
        with UnparserRuleContext(self, 'by_reference_clause', parent) as current:
            self._reserve(1, self.T__10, parent=current)
            self.WORD(parent=current)
            return current
    by_reference_clause.min_size = RuleSize(1, 2)

    def by_content_clause(self, parent=None):
        with UnparserRuleContext(self, 'by_content_clause', parent) as current:
            self._reserve(1, self.T__11, parent=current)
            self.atomic(parent=current)
            return current
    by_content_clause.min_size = RuleSize(4, 2)

    def by_value_clause(self, parent=None):
        with UnparserRuleContext(self, 'by_value_clause', parent) as current:
            self._reserve(1, self.T__12, parent=current)
            self.atomic(parent=current)
            return current
    by_value_clause.min_size = RuleSize(4, 2)

    def sentence(self, parent=None):
        with UnparserRuleContext(self, 'sentence', parent) as current:
            with QuantifierContext(self, 0, 1, inf, RuleSize(3, 1), 1) as quant0:
                while quant0(current):
                    self.statement(parent=current)
            self.T__1(parent=current)
            return current
    sentence.min_size = RuleSize(3, 2)

    def paragraph(self, parent=None):
        with UnparserRuleContext(self, 'paragraph', parent) as current:
            self._reserve(3, self.WORD, parent=current)
            self._reserve(2, self.T__1, parent=current)
            with QuantifierContext(self, 0, 1, inf, RuleSize(4, 2), 0) as quant0:
                while quant0(current):
                    self.sentence(parent=current)
            return current
    paragraph.min_size = RuleSize(4, 4)

    def copy(self, parent=None):
        with UnparserRuleContext(self, 'copy', parent) as current:
            self._reserve(1, self.T__13, parent=current)
            self.WORD(parent=current)
            with QuantifierContext(self, 0, 0, 1, RuleSize(3, 6), 0) as quant0:
                while quant0(current):
                    self.replacing(parent=current)
            return current
    copy.min_size = RuleSize(1, 2)

    def replacing(self, parent=None):
        with UnparserRuleContext(self, 'replacing', parent) as current:
            self._reserve(5, self.T__14, parent=current)
            with QuantifierContext(self, 0, 1, inf, RuleSize(2, 5), 0) as quant0:
                while quant0(current):
                    self.replacement_pair(parent=current)
            return current
    replacing.min_size = RuleSize(2, 6)

    def replacement_pair(self, parent=None):
        with UnparserRuleContext(self, 'replacement_pair', parent) as current:
            self._reserve(4, self.T__15, parent=current)
            self._reserve(4, self.replacement_literal, parent=current)
            self._reserve(3, self.T__15, parent=current)
            self._reserve(2, self.T__16, parent=current)
            self._reserve(1, self.T__15, parent=current)
            self._reserve(1, self.replacement_literal, parent=current)
            self.T__15(parent=current)
            return current
    replacement_pair.min_size = RuleSize(1, 5)

    def replacement_literal(self, parent=None):
        with UnparserRuleContext(self, 'replacement_literal', parent) as current:
            with QuantifierContext(self, 0, 0, inf, RuleSize(2, 1), 0) as quant0:
                while quant0(current):
                    self._dot(parent=current)
            return current
    replacement_literal.min_size = RuleSize(0, 0)

    def statement(self, parent=None):
        with UnparserRuleContext(self, 'statement', parent) as current:
            with AlternationContext(self, 0, (RuleSize(5, 4), RuleSize(6, 4), RuleSize(6, 4), RuleSize(6, 4), RuleSize(4, 4), RuleSize(3, 4), RuleSize(2, 1), RuleSize(6, 2), RuleSize(3, 2), RuleSize(8, 6), RuleSize(2, 3), RuleSize(3, 3), RuleSize(3, 4), RuleSize(2, 2), RuleSize(3, 2), RuleSize(2, 2), RuleSize(2, 2), RuleSize(2, 6), RuleSize(6, 5)), 0, (1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1)) as alt0:
                [self.add, self.subtract, self.multiply, self.divide, self.set, self.move, self.stop, self.display, self.accept, self.evaluate, self.goto, self.computable_goto, self.signal, self.loop, self.perform, self.next_sentence, self.copy, self.alter, self.if_statement][alt0(current)](parent=current)
            return current
    statement.min_size = RuleSize(2, 1)

    def set(self, parent=None):
        with UnparserRuleContext(self, 'set', parent) as current:
            self._reserve(3, self.T__17, parent=current)
            self._reserve(2, self.identifier, parent=current)
            self._reserve(1, self.T__18, parent=current)
            self.anyLiteral(parent=current)
            return current
    set.min_size = RuleSize(3, 4)

    def alter(self, parent=None):
        with UnparserRuleContext(self, 'alter', parent) as current:
            self._reserve(5, self.T__19, parent=current)
            self._reserve(4, self.WORD, parent=current)
            self._reserve(3, self.T__18, parent=current)
            self._reserve(2, self.T__20, parent=current)
            self._reserve(1, self.T__18, parent=current)
            self.WORD(parent=current)
            return current
    alter.min_size = RuleSize(1, 6)

    def next_sentence(self, parent=None):
        with UnparserRuleContext(self, 'next_sentence', parent) as current:
            self._reserve(1, self.T__21, parent=current)
            self.T__22(parent=current)
            return current
    next_sentence.min_size = RuleSize(1, 2)

    def goto(self, parent=None):
        with UnparserRuleContext(self, 'goto', parent) as current:
            self._reserve(2, self.T__23, parent=current)
            self._reserve(1, self.T__18, parent=current)
            self.WORD(parent=current)
            return current
    goto.min_size = RuleSize(1, 3)

    def computable_goto(self, parent=None):
        with UnparserRuleContext(self, 'computable_goto', parent) as current:
            self._reserve(2, self.T__23, parent=current)
            self._reserve(1, self.T__18, parent=current)
            self.identifier(parent=current)
            return current
    computable_goto.min_size = RuleSize(2, 3)

    def add(self, parent=None):
        with UnparserRuleContext(self, 'add', parent) as current:
            self._reserve(3, self.T__24, parent=current)
            with QuantifierContext(self, 0, 1, inf, RuleSize(4, 1), 2) as quant0:
                while quant0(current):
                    self.atomic(parent=current)
            self._reserve(1, self.T__18, parent=current)
            self.atomic(parent=current)
            with QuantifierContext(self, 1, 0, inf, RuleSize(2, 2), 0) as quant1:
                while quant1(current):
                    self._reserve(1, self.T__25, parent=current)
                    self.identifier(parent=current)
            return current
    add.min_size = RuleSize(4, 4)

    def display(self, parent=None):
        with UnparserRuleContext(self, 'display', parent) as current:
            self._reserve(1, self.T__26, parent=current)
            with QuantifierContext(self, 0, 1, inf, RuleSize(5, 1), 0) as quant0:
                while quant0(current):
                    self.atomic_with_delimitation(parent=current)
            with QuantifierContext(self, 1, 0, 1, RuleSize(1, 1), 0) as quant1:
                while quant1(current):
                    self.WITH_NO_ADVANCING(parent=current)
            return current
    display.min_size = RuleSize(5, 2)

    def atomic_with_delimitation(self, parent=None):
        with UnparserRuleContext(self, 'atomic_with_delimitation', parent) as current:
            self.atomic(parent=current)
            with QuantifierContext(self, 0, 0, 1, RuleSize(2, 2), 0) as quant0:
                while quant0(current):
                    self.delimitation_clause(parent=current)
            return current
    atomic_with_delimitation.min_size = RuleSize(4, 1)

    def delimitation_clause(self, parent=None):
        with UnparserRuleContext(self, 'delimitation_clause', parent) as current:
            self._reserve(1, self.T__27, parent=current)
            with AlternationContext(self, 0, (RuleSize(1, 1), RuleSize(1, 1), RuleSize(3, 1)), 0, (1, 1, 1)) as alt0:
                [self.T__28, self.T__29, self.anyLiteral][alt0(current)](parent=current)
            return current
    delimitation_clause.min_size = RuleSize(1, 2)

    def divide(self, parent=None):
        with UnparserRuleContext(self, 'divide', parent) as current:
            self._reserve(3, self.T__30, parent=current)
            self._reserve(2, self.denominator, parent=current)
            self._reserve(1, self.T__31, parent=current)
            self.numerators(parent=current)
            with QuantifierContext(self, 0, 0, 1, RuleSize(3, 2), 0) as quant0:
                while quant0(current):
                    self.giving_clause(parent=current)
                    with QuantifierContext(self, 1, 0, 1, RuleSize(3, 2), 0) as quant1:
                        while quant1(current):
                            self.remainder_clause(parent=current)
            return current
    divide.min_size = RuleSize(5, 4)

    def denominator(self, parent=None):
        with UnparserRuleContext(self, 'denominator', parent) as current:
            self.atomic(parent=current)
            return current
    denominator.min_size = RuleSize(4, 1)

    def numerators(self, parent=None):
        with UnparserRuleContext(self, 'numerators', parent) as current:
            with QuantifierContext(self, 0, 1, inf, RuleSize(4, 1), 0) as quant0:
                while quant0(current):
                    self.atomic(parent=current)
            return current
    numerators.min_size = RuleSize(4, 1)

    def giving_clause(self, parent=None):
        with UnparserRuleContext(self, 'giving_clause', parent) as current:
            self._reserve(1, self.T__25, parent=current)
            with QuantifierContext(self, 0, 1, inf, RuleSize(2, 1), 0) as quant0:
                while quant0(current):
                    self.identifier(parent=current)
            return current
    giving_clause.min_size = RuleSize(2, 2)

    def remainder_clause(self, parent=None):
        with UnparserRuleContext(self, 'remainder_clause', parent) as current:
            self._reserve(1, self.T__32, parent=current)
            self.identifier(parent=current)
            return current
    remainder_clause.min_size = RuleSize(2, 2)

    def multiply(self, parent=None):
        with UnparserRuleContext(self, 'multiply', parent) as current:
            self._reserve(3, self.T__33, parent=current)
            self._reserve(2, self.multiplier, parent=current)
            self._reserve(1, self.T__16, parent=current)
            self.multiply_targets(parent=current)
            with QuantifierContext(self, 0, 0, 1, RuleSize(3, 2), 0) as quant0:
                while quant0(current):
                    self.single_ident_giving_clause(parent=current)
            return current
    multiply.min_size = RuleSize(5, 4)

    def multiplier(self, parent=None):
        with UnparserRuleContext(self, 'multiplier', parent) as current:
            self.atomic(parent=current)
            return current
    multiplier.min_size = RuleSize(4, 1)

    def multiply_targets(self, parent=None):
        with UnparserRuleContext(self, 'multiply_targets', parent) as current:
            with QuantifierContext(self, 0, 1, inf, RuleSize(4, 1), 0) as quant0:
                while quant0(current):
                    self.atomic(parent=current)
            return current
    multiply_targets.min_size = RuleSize(4, 1)

    def single_ident_giving_clause(self, parent=None):
        with UnparserRuleContext(self, 'single_ident_giving_clause', parent) as current:
            self._reserve(1, self.T__25, parent=current)
            self.identifier(parent=current)
            return current
    single_ident_giving_clause.min_size = RuleSize(2, 2)

    def subtract(self, parent=None):
        with UnparserRuleContext(self, 'subtract', parent) as current:
            self._reserve(3, self.T__34, parent=current)
            self._reserve(2, self.substract_values_clause, parent=current)
            self.subtract_targets_clause(parent=current)
            with QuantifierContext(self, 0, 0, inf, RuleSize(3, 2), 0) as quant0:
                while quant0(current):
                    self.single_ident_giving_clause(parent=current)
            return current
    subtract.min_size = RuleSize(5, 4)

    def subtract_targets_clause(self, parent=None):
        with UnparserRuleContext(self, 'subtract_targets_clause', parent) as current:
            self._reserve(1, self.T__35, parent=current)
            with QuantifierContext(self, 0, 1, inf, RuleSize(4, 1), 0) as quant0:
                while quant0(current):
                    self.atomic(parent=current)
            return current
    subtract_targets_clause.min_size = RuleSize(4, 2)

    def substract_values_clause(self, parent=None):
        with UnparserRuleContext(self, 'substract_values_clause', parent) as current:
            with QuantifierContext(self, 0, 1, inf, RuleSize(4, 1), 0) as quant0:
                while quant0(current):
                    self.atomic(parent=current)
            return current
    substract_values_clause.min_size = RuleSize(4, 1)

    def accept(self, parent=None):
        with UnparserRuleContext(self, 'accept', parent) as current:
            self._reserve(1, self.T__36, parent=current)
            with QuantifierContext(self, 0, 1, inf, RuleSize(2, 1), 0) as quant0:
                while quant0(current):
                    self.identifier(parent=current)
            return current
    accept.min_size = RuleSize(2, 2)

    def stop(self, parent=None):
        with UnparserRuleContext(self, 'stop', parent) as current:
            self.T__37(parent=current)
            return current
    stop.min_size = RuleSize(1, 1)

    def evaluate(self, parent=None):
        with UnparserRuleContext(self, 'evaluate', parent) as current:
            self._reserve(5, self.T__38, parent=current)
            self._reserve(4, self.anyExpr, parent=current)
            with QuantifierContext(self, 0, 0, inf, RuleSize(7, 2), 4) as quant0:
                while quant0(current):
                    self._reserve(1, self.T__39, parent=current)
                    self.anyExpr(parent=current)
            with QuantifierContext(self, 1, 1, inf, RuleSize(4, 3), 1) as quant1:
                while quant1(current):
                    self.whenWithStatements(parent=current)
            self.T__40(parent=current)
            return current
    evaluate.min_size = RuleSize(7, 6)

    def whenWithStatements(self, parent=None):
        with UnparserRuleContext(self, 'whenWithStatements', parent) as current:
            self._reserve(1, self.whenClause, parent=current)
            with QuantifierContext(self, 0, 1, inf, RuleSize(3, 1), 0) as quant0:
                while quant0(current):
                    self.statement(parent=current)
            return current
    whenWithStatements.min_size = RuleSize(3, 3)

    def whenClause(self, parent=None):
        with UnparserRuleContext(self, 'whenClause', parent) as current:
            with AlternationContext(self, 0, (RuleSize(2, 2), RuleSize(8, 2)), 0, (1, 1)) as alt0:
                [self.whenClause_whenOther, self.whenClause_whenComplex][alt0(current)](parent=current)
            return current
    whenClause.min_size = RuleSize(2, 2)

    def whenValueMatches(self, parent=None):
        with UnparserRuleContext(self, 'whenValueMatches', parent) as current:
            with QuantifierContext(self, 0, 1, inf, RuleSize(6, 1), 0) as quant0:
                while quant0(current):
                    self.whenValueMatch(parent=current)
            return current
    whenValueMatches.min_size = RuleSize(6, 1)

    def whenValueMatch(self, parent=None):
        with UnparserRuleContext(self, 'whenValueMatch', parent) as current:
            with AlternationContext(self, 0, (RuleSize(5, 1), RuleSize(5, 3)), 0, (1, 1)) as alt0:
                [self.whenValueMatch_whenValueMatchSimple, self.whenValueMatch_whenValueMatchThrough][alt0(current)](parent=current)
            return current
    whenValueMatch.min_size = RuleSize(5, 1)

    def if_statement(self, parent=None):
        with UnparserRuleContext(self, 'if_statement', parent) as current:
            self._reserve(4, self.T__44, parent=current)
            self._reserve(3, self.booleanExpr, parent=current)
            self._reserve(2, self.T__45, parent=current)
            with QuantifierContext(self, 0, 1, inf, RuleSize(3, 1), 1) as quant0:
                while quant0(current):
                    self.statement(parent=current)
            with QuantifierContext(self, 1, 0, 1, RuleSize(4, 2), 1) as quant1:
                while quant1(current):
                    self.else_clause(parent=current)
            self.T__40(parent=current)
            return current
    if_statement.min_size = RuleSize(5, 5)

    def else_clause(self, parent=None):
        with UnparserRuleContext(self, 'else_clause', parent) as current:
            self._reserve(1, self.T__46, parent=current)
            with QuantifierContext(self, 0, 1, inf, RuleSize(3, 1), 0) as quant0:
                while quant0(current):
                    self.statement(parent=current)
            return current
    else_clause.min_size = RuleSize(3, 2)

    def loop(self, parent=None):
        with UnparserRuleContext(self, 'loop', parent) as current:
            self._reserve(1, self.T__47, parent=current)
            with QuantifierContext(self, 0, 0, inf, RuleSize(4, 1), 1) as quant0:
                while quant0(current):
                    self.loopStm(parent=current)
            self.T__40(parent=current)
            return current
    loop.min_size = RuleSize(1, 2)

    def loopStmVarying(self, parent=None):
        with UnparserRuleContext(self, 'loopStmVarying', parent) as current:
            self.T__48(parent=current)
            with QuantifierContext(self, 0, 0, 1, RuleSize(2, 1), 0) as quant0:
                while quant0(current):
                    self.identifier(parent=current)
            self.fromClause(parent=current)
            self.toClause(parent=current)
            self.byClause(parent=current)
            return current
    loopStmVarying.min_size = RuleSize(1, 1)

    def fromClause(self, parent=None):
        with UnparserRuleContext(self, 'fromClause', parent) as current:
            with QuantifierContext(self, 0, 0, 1, RuleSize(4, 2), 0) as quant0:
                while quant0(current):
                    self._reserve(1, self.T__35, parent=current)
                    self.atomic(parent=current)
            return current
    fromClause.min_size = RuleSize(0, 0)

    def toClause(self, parent=None):
        with UnparserRuleContext(self, 'toClause', parent) as current:
            with QuantifierContext(self, 0, 0, 1, RuleSize(4, 2), 0) as quant0:
                while quant0(current):
                    self._reserve(1, self.T__18, parent=current)
                    self.atomic(parent=current)
            return current
    toClause.min_size = RuleSize(0, 0)

    def byClause(self, parent=None):
        with UnparserRuleContext(self, 'byClause', parent) as current:
            with QuantifierContext(self, 0, 0, 1, RuleSize(4, 2), 0) as quant0:
                while quant0(current):
                    self._reserve(1, self.T__16, parent=current)
                    self.atomic(parent=current)
            return current
    byClause.min_size = RuleSize(0, 0)

    def loopStmWhile(self, parent=None):
        with UnparserRuleContext(self, 'loopStmWhile', parent) as current:
            self._reserve(1, self.T__49, parent=current)
            self.booleanExpr(parent=current)
            return current
    loopStmWhile.min_size = RuleSize(5, 2)

    def loopStmUntil(self, parent=None):
        with UnparserRuleContext(self, 'loopStmUntil', parent) as current:
            self._reserve(1, self.T__50, parent=current)
            self.booleanExpr(parent=current)
            return current
    loopStmUntil.min_size = RuleSize(5, 2)

    def loopStm(self, parent=None):
        with UnparserRuleContext(self, 'loopStm', parent) as current:
            with AlternationContext(self, 0, (RuleSize(3, 1), RuleSize(7, 2), RuleSize(7, 2), RuleSize(4, 1)), 0, (1, 1, 1, 1)) as alt0:
                [self.loopStm_loopStmVar, self.loopStm_loopStmWhl, self.loopStm_loopStmUtl, self.loopStm_loopStmStm][alt0(current)](parent=current)
            return current
    loopStm.min_size = RuleSize(3, 1)

    def signal(self, parent=None):
        with UnparserRuleContext(self, 'signal', parent) as current:
            with AlternationContext(self, 0, (RuleSize(2, 4), RuleSize(2, 4)), 0, (1, 1)) as alt0:
                [self.signal_signalOff, self.signal_signalNormal][alt0(current)](parent=current)
            return current
    signal.min_size = RuleSize(2, 4)

    def anyExpr(self, parent=None):
        with UnparserRuleContext(self, 'anyExpr', parent) as current:
            with AlternationContext(self, 0, (RuleSize(11, 1), RuleSize(9, 1), RuleSize(6, 1)), 0, (1, 1, 1)) as alt0:
                [self.anyExpr_anyExprArith, self.anyExpr_anyExprStr, self.anyExpr_anyExprBool][alt0(current)](parent=current)
            return current
    anyExpr.min_size = RuleSize(6, 1)

    def booleanExpr(self, parent=None):
        with UnparserRuleContext(self, 'booleanExpr', parent) as current:
            with AlternationContext(self, 0, (RuleSize(4, 1), RuleSize(13, 1), RuleSize(15, 2), RuleSize(15, 3), RuleSize(6, 2), RuleSize(6, 3), RuleSize(6, 3), RuleSize(6, 3)), 0, (1, 1, 1, 1, 1, 1, 1, 1)) as alt0:
                [self.booleanExpr_boolTerm, self.booleanExpr_boolExprTermContracted, self.booleanExpr_boolExprCompareContracted, self.booleanExpr_boolExprCompare, self.booleanExpr_boolExprNot, self.booleanExpr_boolExprAnd, self.booleanExpr_boolExprXor, self.booleanExpr_boolExprOr][alt0(current)](parent=current)
            return current
    booleanExpr.min_size = RuleSize(4, 1)

    def operatorContractedBooleanExpr(self, parent=None):
        with UnparserRuleContext(self, 'operatorContractedBooleanExpr', parent) as current:
            with AlternationContext(self, 0, (RuleSize(13, 2), RuleSize(15, 3)), 0, (1, 1)) as alt0:
                [self.operatorContractedBooleanExpr_boolExprOperatorTerm, self.operatorContractedBooleanExpr_boolExprOperatorNot][alt0(current)](parent=current)
            return current
    operatorContractedBooleanExpr.min_size = RuleSize(13, 2)

    def termOperatorContractedBooleanExpr(self, parent=None):
        with UnparserRuleContext(self, 'termOperatorContractedBooleanExpr', parent) as current:
            with AlternationContext(self, 0, (RuleSize(11, 2), RuleSize(11, 2), RuleSize(11, 2), RuleSize(11, 2), RuleSize(11, 2)), 0, (1, 1, 1, 1, 1)) as alt0:
                [self.termOperatorContractedBooleanExpr_boolExprOperatorEQ, self.termOperatorContractedBooleanExpr_boolExprOperatorLT, self.termOperatorContractedBooleanExpr_boolExprOperatorLE, self.termOperatorContractedBooleanExpr_boolExprOperatorGT, self.termOperatorContractedBooleanExpr_boolExprOperatorGE][alt0(current)](parent=current)
            return current
    termOperatorContractedBooleanExpr.min_size = RuleSize(11, 2)

    def termContractedBooleanExpr(self, parent=None):
        with UnparserRuleContext(self, 'termContractedBooleanExpr', parent) as current:
            with AlternationContext(self, 0, (RuleSize(11, 1), RuleSize(13, 2)), 0, (1, 1)) as alt0:
                [self.termContractedBooleanExpr_boolExprContractedTerm, self.termContractedBooleanExpr_boolExprContractedNot][alt0(current)](parent=current)
            return current
    termContractedBooleanExpr.min_size = RuleSize(11, 1)

    def booleanTerm(self, parent=None):
        with UnparserRuleContext(self, 'booleanTerm', parent) as current:
            with AlternationContext(self, 0, (RuleSize(2, 1), RuleSize(2, 1), RuleSize(6, 3)), 0, (1, 1, 1)) as alt0:
                [self.booleanTerm_boolTermTrue, self.booleanTerm_boolTermFalse, self.booleanTerm_boolTermParens][alt0(current)](parent=current)
            return current
    booleanTerm.min_size = RuleSize(2, 1)

    def arithExpr(self, parent=None):
        with UnparserRuleContext(self, 'arithExpr', parent) as current:
            with AlternationContext(self, 0, (RuleSize(9, 1), RuleSize(11, 3), RuleSize(11, 3), RuleSize(11, 3)), 0, (1, 1, 1, 1)) as alt0:
                [self.arithExpr_arithExprSub, self.arithExpr_arithExprPow, self.arithExpr_arithExprPlus, self.arithExpr_arithExprMinus][alt0(current)](parent=current)
            return current
    arithExpr.min_size = RuleSize(9, 1)

    def arithSubExpr(self, parent=None):
        with UnparserRuleContext(self, 'arithSubExpr', parent) as current:
            with AlternationContext(self, 0, (RuleSize(7, 1), RuleSize(9, 3), RuleSize(9, 3)), 0, (1, 1, 1)) as alt0:
                [self.arithSubExpr_arithExprTerm, self.arithSubExpr_arithExprMult, self.arithSubExpr_arithExprDiv][alt0(current)](parent=current)
            return current
    arithSubExpr.min_size = RuleSize(7, 1)

    def arithTerm(self, parent=None):
        with UnparserRuleContext(self, 'arithTerm', parent) as current:
            with AlternationContext(self, 0, (RuleSize(5, 1), RuleSize(11, 3)), 0, (1, 1)) as alt0:
                [self.arithTerm_arithTermAtomic, self.arithTerm_arithTermParens][alt0(current)](parent=current)
            return current
    arithTerm.min_size = RuleSize(5, 1)

    def stringExpr(self, parent=None):
        with UnparserRuleContext(self, 'stringExpr', parent) as current:
            with AlternationContext(self, 0, (RuleSize(7, 1), RuleSize(9, 3)), 0, (1, 1)) as alt0:
                [self.stringExpr_stringExprTerm, self.stringExpr_stringExprPlus][alt0(current)](parent=current)
            return current
    stringExpr.min_size = RuleSize(7, 1)

    def stringTerm(self, parent=None):
        with UnparserRuleContext(self, 'stringTerm', parent) as current:
            with AlternationContext(self, 0, (RuleSize(5, 1), RuleSize(9, 3)), 0, (1, 1)) as alt0:
                [self.stringTerm_stringTermAtomic, self.stringTerm_stringTermParens][alt0(current)](parent=current)
            return current
    stringTerm.min_size = RuleSize(5, 1)

    def move(self, parent=None):
        with UnparserRuleContext(self, 'move', parent) as current:
            self._reserve(3, self.T__73, parent=current)
            self._reserve(2, self.move_value_clause, parent=current)
            self._reserve(1, self.T__18, parent=current)
            with QuantifierContext(self, 0, 1, inf, RuleSize(2, 1), 0) as quant0:
                while quant0(current):
                    self.identifier(parent=current)
            return current
    move.min_size = RuleSize(2, 4)

    def move_value_clause(self, parent=None):
        with UnparserRuleContext(self, 'move_value_clause', parent) as current:
            with AlternationContext(self, 0, (RuleSize(4, 1), RuleSize(1, 1), RuleSize(1, 1), RuleSize(1, 1)), 0, (1, 1, 1, 1)) as alt0:
                [self.atomic, self.T__74, self.T__75, self.T__76][alt0(current)](parent=current)
            return current
    move_value_clause.min_size = RuleSize(1, 1)

    def perform(self, parent=None):
        with UnparserRuleContext(self, 'perform', parent) as current:
            self._reserve(1, self.T__77, parent=current)
            self.procedure_name(parent=current)
            with QuantifierContext(self, 0, 0, 1, RuleSize(3, 2), 0) as quant0:
                while quant0(current):
                    self.through_clause(parent=current)
            with QuantifierContext(self, 1, 0, 1, RuleSize(5, 2), 0) as quant1:
                while quant1(current):
                    self.times_clause(parent=current)
            return current
    perform.min_size = RuleSize(2, 2)

    def procedure_name(self, parent=None):
        with UnparserRuleContext(self, 'procedure_name', parent) as current:
            self.WORD(parent=current)
            return current
    procedure_name.min_size = RuleSize(1, 1)

    def through_clause(self, parent=None):
        with UnparserRuleContext(self, 'through_clause', parent) as current:
            self._reserve(1, self.T__43, parent=current)
            self.procedure_name(parent=current)
            return current
    through_clause.min_size = RuleSize(2, 2)

    def times_clause(self, parent=None):
        with UnparserRuleContext(self, 'times_clause', parent) as current:
            self._reserve(1, self.atomic, parent=current)
            self.T__7(parent=current)
            return current
    times_clause.min_size = RuleSize(4, 2)

    def WITH_NO_ADVANCING(self, parent=None):
        with UnlexerRuleContext(self, 'WITH_NO_ADVANCING', parent) as current:
            current.src += 'WITH NO ADVANCING'
            return current
    WITH_NO_ADVANCING.min_size = RuleSize(0, 0)

    def atomic(self, parent=None):
        with UnparserRuleContext(self, 'atomic', parent) as current:
            with AlternationContext(self, 0, (RuleSize(4, 1), RuleSize(3, 1)), 0, (1, 1)) as alt0:
                [self.atomic_atomicLiteral, self.atomic_atomicIdent][alt0(current)](parent=current)
            return current
    atomic.min_size = RuleSize(3, 1)

    def anyLiteral(self, parent=None):
        with UnparserRuleContext(self, 'anyLiteral', parent) as current:
            with AlternationContext(self, 0, (RuleSize(2, 1), RuleSize(2, 1)), 0, (1, 1)) as alt0:
                [self.anyLiteral_literalNum, self.anyLiteral_literalStr][alt0(current)](parent=current)
            return current
    anyLiteral.min_size = RuleSize(2, 1)

    def NUM_LITERAL(self, parent=None):
        with UnlexerRuleContext(self, 'NUM_LITERAL', parent) as current:
            with QuantifierContext(self, 0, 0, 1, RuleSize(0, 0), 0) as quant0:
                while quant0(current):
                    current.src += self._model.charset(current, 0, self._charsets[1])
            with QuantifierContext(self, 1, 0, inf, RuleSize(0, 0), 0) as quant1:
                while quant1(current):
                    current.src += self._model.charset(current, 1, self._charsets[2])
            with AlternationContext(self, 0, (RuleSize(0, 0), RuleSize(0, 0)), 0, (1, 1)) as alt0:
                choice0 = alt0(current)
                if choice0 == 0:
                    current.src += self._model.charset(current, 2, self._charsets[2])
                elif choice0 == 1:
                    current.src += self._model.charset(current, 3, self._charsets[3])
                    with QuantifierContext(self, 2, 1, inf, RuleSize(0, 0), 0) as quant2:
                        while quant2(current):
                            current.src += self._model.charset(current, 4, self._charsets[2])
            return current
    NUM_LITERAL.min_size = RuleSize(0, 0)

    def STR_LITERAL(self, parent=None):
        with UnlexerRuleContext(self, 'STR_LITERAL', parent) as current:
            current.src += '"'
            with QuantifierContext(self, 0, 0, inf, RuleSize(0, 0), 0) as quant0:
                while quant0(current):
                    current.src += self._model.charset(current, 0, self._charsets[4])
            current.src += '"'
            return current
    STR_LITERAL.min_size = RuleSize(0, 0)

    def identifier(self, parent=None):
        with UnparserRuleContext(self, 'identifier', parent) as current:
            self.WORD(parent=current)
            with QuantifierContext(self, 0, 0, inf, RuleSize(1, 2), 0) as quant0:
                while quant0(current):
                    self._reserve(1, self.T__78, parent=current)
                    self.WORD(parent=current)
            with QuantifierContext(self, 1, 0, 1, RuleSize(2, 3), 0) as quant1:
                while quant1(current):
                    self.cardinality(parent=current)
            return current
    identifier.min_size = RuleSize(1, 1)

    def cardinality(self, parent=None):
        with UnparserRuleContext(self, 'cardinality', parent) as current:
            self._reserve(2, self.T__79, parent=current)
            self._reserve(1, self.NUM_LITERAL, parent=current)
            self.T__80(parent=current)
            return current
    cardinality.min_size = RuleSize(1, 3)

    def WORD(self, parent=None):
        with UnlexerRuleContext(self, 'WORD', parent) as current:
            current.src += self._model.charset(current, 0, self._charsets[5])
            with QuantifierContext(self, 0, 0, inf, RuleSize(0, 0), 0) as quant0:
                while quant0(current):
                    current.src += self._model.charset(current, 1, self._charsets[6])
            with QuantifierContext(self, 1, 0, 1, RuleSize(0, 0), 0) as quant1:
                while quant1(current):
                    current.src += self._model.charset(current, 2, self._charsets[5])
            return current
    WORD.min_size = RuleSize(0, 0)

    def WS(self, parent=None):
        with UnlexerRuleContext(self, 'WS', parent) as current:
            with QuantifierContext(self, 0, 1, inf, RuleSize(0, 0), 0) as quant0:
                while quant0(current):
                    with AlternationContext(self, 0, (RuleSize(0, 0), RuleSize(0, 0), RuleSize(0, 0), RuleSize(0, 0), RuleSize(0, 0)), 0, (1, 1, 1, 1, 1)) as alt0:
                        current.src += ['\t', ' ', '\r', '\n', '\x0c'][alt0(current)]
            return current
    WS.min_size = RuleSize(0, 0)

    def T__0(self, parent=None):
        with UnlexerRuleContext(self, 'T__0', parent) as current:
            current.src += 'IDENTIFICATION DIVISION'
            return current
    T__0.min_size = RuleSize(0, 0)

    def T__1(self, parent=None):
        with UnlexerRuleContext(self, 'T__1', parent) as current:
            current.src += '.'
            return current
    T__1.min_size = RuleSize(0, 0)

    def T__2(self, parent=None):
        with UnlexerRuleContext(self, 'T__2', parent) as current:
            current.src += '!'
            return current
    T__2.min_size = RuleSize(0, 0)

    def T__3(self, parent=None):
        with UnlexerRuleContext(self, 'T__3', parent) as current:
            current.src += 'DATA DIVISION'
            return current
    T__3.min_size = RuleSize(0, 0)

    def T__4(self, parent=None):
        with UnlexerRuleContext(self, 'T__4', parent) as current:
            current.src += 'PICTURE IS'
            return current
    T__4.min_size = RuleSize(0, 0)

    def T__5(self, parent=None):
        with UnlexerRuleContext(self, 'T__5', parent) as current:
            current.src += 'LIKE'
            return current
    T__5.min_size = RuleSize(0, 0)

    def T__6(self, parent=None):
        with UnlexerRuleContext(self, 'T__6', parent) as current:
            current.src += 'OCCURS'
            return current
    T__6.min_size = RuleSize(0, 0)

    def T__7(self, parent=None):
        with UnlexerRuleContext(self, 'T__7', parent) as current:
            current.src += 'TIMES'
            return current
    T__7.min_size = RuleSize(0, 0)

    def T__8(self, parent=None):
        with UnlexerRuleContext(self, 'T__8', parent) as current:
            current.src += 'PROCEDURE DIVISION'
            return current
    T__8.min_size = RuleSize(0, 0)

    def T__9(self, parent=None):
        with UnlexerRuleContext(self, 'T__9', parent) as current:
            current.src += 'USING'
            return current
    T__9.min_size = RuleSize(0, 0)

    def T__10(self, parent=None):
        with UnlexerRuleContext(self, 'T__10', parent) as current:
            current.src += 'BY REFERENCE'
            return current
    T__10.min_size = RuleSize(0, 0)

    def T__11(self, parent=None):
        with UnlexerRuleContext(self, 'T__11', parent) as current:
            current.src += 'BY CONTENT'
            return current
    T__11.min_size = RuleSize(0, 0)

    def T__12(self, parent=None):
        with UnlexerRuleContext(self, 'T__12', parent) as current:
            current.src += 'BY VALUE'
            return current
    T__12.min_size = RuleSize(0, 0)

    def T__13(self, parent=None):
        with UnlexerRuleContext(self, 'T__13', parent) as current:
            current.src += 'COPY'
            return current
    T__13.min_size = RuleSize(0, 0)

    def T__14(self, parent=None):
        with UnlexerRuleContext(self, 'T__14', parent) as current:
            current.src += 'REPLACING'
            return current
    T__14.min_size = RuleSize(0, 0)

    def T__15(self, parent=None):
        with UnlexerRuleContext(self, 'T__15', parent) as current:
            current.src += '==='
            return current
    T__15.min_size = RuleSize(0, 0)

    def T__16(self, parent=None):
        with UnlexerRuleContext(self, 'T__16', parent) as current:
            current.src += 'BY'
            return current
    T__16.min_size = RuleSize(0, 0)

    def _dot(self, parent=None):
        with UnparserRuleContext(self, '_dot', parent) as current:
            with AlternationContext(self, 0, (RuleSize(1, 1), RuleSize(1, 1), RuleSize(1, 1), RuleSize(1, 1), RuleSize(1, 1), RuleSize(1, 1), RuleSize(1, 1), RuleSize(1, 1), RuleSize(1, 1), RuleSize(1, 1), RuleSize(1, 1), RuleSize(1, 1), RuleSize(1, 1), RuleSize(1, 1), RuleSize(1, 1), RuleSize(1, 1), RuleSize(1, 1), RuleSize(1, 1), RuleSize(1, 1), RuleSize(1, 1), RuleSize(1, 1), RuleSize(1, 1)), 0, (1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1)) as alt0:
                [self.WITH_NO_ADVANCING, self.NUM_LITERAL, self.STR_LITERAL, self.WORD, self.WS, self.T__0, self.T__1, self.T__2, self.T__3, self.T__4, self.T__5, self.T__6, self.T__7, self.T__8, self.T__9, self.T__10, self.T__11, self.T__12, self.T__13, self.T__14, self.T__15, self.T__16][alt0(current)](parent=current)
            return current
    _dot.min_size = RuleSize(1, 1)

    def T__17(self, parent=None):
        with UnlexerRuleContext(self, 'T__17', parent) as current:
            current.src += 'SET'
            return current
    T__17.min_size = RuleSize(0, 0)

    def T__18(self, parent=None):
        with UnlexerRuleContext(self, 'T__18', parent) as current:
            current.src += 'TO'
            return current
    T__18.min_size = RuleSize(0, 0)

    def T__19(self, parent=None):
        with UnlexerRuleContext(self, 'T__19', parent) as current:
            current.src += 'ALTER'
            return current
    T__19.min_size = RuleSize(0, 0)

    def T__20(self, parent=None):
        with UnlexerRuleContext(self, 'T__20', parent) as current:
            current.src += 'PROCEED'
            return current
    T__20.min_size = RuleSize(0, 0)

    def T__21(self, parent=None):
        with UnlexerRuleContext(self, 'T__21', parent) as current:
            current.src += 'NEXT'
            return current
    T__21.min_size = RuleSize(0, 0)

    def T__22(self, parent=None):
        with UnlexerRuleContext(self, 'T__22', parent) as current:
            current.src += 'SENTENCE'
            return current
    T__22.min_size = RuleSize(0, 0)

    def T__23(self, parent=None):
        with UnlexerRuleContext(self, 'T__23', parent) as current:
            current.src += 'GO'
            return current
    T__23.min_size = RuleSize(0, 0)

    def T__24(self, parent=None):
        with UnlexerRuleContext(self, 'T__24', parent) as current:
            current.src += 'ADD'
            return current
    T__24.min_size = RuleSize(0, 0)

    def T__25(self, parent=None):
        with UnlexerRuleContext(self, 'T__25', parent) as current:
            current.src += 'GIVING'
            return current
    T__25.min_size = RuleSize(0, 0)

    def T__26(self, parent=None):
        with UnlexerRuleContext(self, 'T__26', parent) as current:
            current.src += 'DISPLAY'
            return current
    T__26.min_size = RuleSize(0, 0)

    def T__27(self, parent=None):
        with UnlexerRuleContext(self, 'T__27', parent) as current:
            current.src += 'DELIMITED BY'
            return current
    T__27.min_size = RuleSize(0, 0)

    def T__28(self, parent=None):
        with UnlexerRuleContext(self, 'T__28', parent) as current:
            current.src += 'SIZE'
            return current
    T__28.min_size = RuleSize(0, 0)

    def T__29(self, parent=None):
        with UnlexerRuleContext(self, 'T__29', parent) as current:
            current.src += 'SPACE'
            return current
    T__29.min_size = RuleSize(0, 0)

    def T__30(self, parent=None):
        with UnlexerRuleContext(self, 'T__30', parent) as current:
            current.src += 'DIVIDE'
            return current
    T__30.min_size = RuleSize(0, 0)

    def T__31(self, parent=None):
        with UnlexerRuleContext(self, 'T__31', parent) as current:
            current.src += 'INTO'
            return current
    T__31.min_size = RuleSize(0, 0)

    def T__32(self, parent=None):
        with UnlexerRuleContext(self, 'T__32', parent) as current:
            current.src += 'REMAINDER'
            return current
    T__32.min_size = RuleSize(0, 0)

    def T__33(self, parent=None):
        with UnlexerRuleContext(self, 'T__33', parent) as current:
            current.src += 'MULTIPLY'
            return current
    T__33.min_size = RuleSize(0, 0)

    def T__34(self, parent=None):
        with UnlexerRuleContext(self, 'T__34', parent) as current:
            current.src += 'SUBTRACT'
            return current
    T__34.min_size = RuleSize(0, 0)

    def T__35(self, parent=None):
        with UnlexerRuleContext(self, 'T__35', parent) as current:
            current.src += 'FROM'
            return current
    T__35.min_size = RuleSize(0, 0)

    def T__36(self, parent=None):
        with UnlexerRuleContext(self, 'T__36', parent) as current:
            current.src += 'ACCEPT'
            return current
    T__36.min_size = RuleSize(0, 0)

    def T__37(self, parent=None):
        with UnlexerRuleContext(self, 'T__37', parent) as current:
            current.src += 'STOP'
            return current
    T__37.min_size = RuleSize(0, 0)

    def T__38(self, parent=None):
        with UnlexerRuleContext(self, 'T__38', parent) as current:
            current.src += 'EVALUATE'
            return current
    T__38.min_size = RuleSize(0, 0)

    def T__39(self, parent=None):
        with UnlexerRuleContext(self, 'T__39', parent) as current:
            current.src += 'ALSO'
            return current
    T__39.min_size = RuleSize(0, 0)

    def T__40(self, parent=None):
        with UnlexerRuleContext(self, 'T__40', parent) as current:
            current.src += 'END'
            return current
    T__40.min_size = RuleSize(0, 0)

    def whenClause_whenOther(self, parent=None):
        with UnparserRuleContext(self, 'whenClause_whenOther', parent) as current:
            self._reserve(1, self.T__41, parent=current)
            self.T__42(parent=current)
            return current
    whenClause_whenOther.min_size = RuleSize(1, 2)

    def T__41(self, parent=None):
        with UnlexerRuleContext(self, 'T__41', parent) as current:
            current.src += 'WHEN'
            return current
    T__41.min_size = RuleSize(0, 0)

    def T__42(self, parent=None):
        with UnlexerRuleContext(self, 'T__42', parent) as current:
            current.src += 'OTHER'
            return current
    T__42.min_size = RuleSize(0, 0)

    def whenClause_whenComplex(self, parent=None):
        with UnparserRuleContext(self, 'whenClause_whenComplex', parent) as current:
            self._reserve(1, self.T__41, parent=current)
            self.whenValueMatches(parent=current)
            with QuantifierContext(self, 0, 0, inf, RuleSize(7, 2), 0) as quant0:
                while quant0(current):
                    self._reserve(1, self.T__39, parent=current)
                    self.whenValueMatches(parent=current)
            return current
    whenClause_whenComplex.min_size = RuleSize(7, 2)

    def whenValueMatch_whenValueMatchSimple(self, parent=None):
        with UnparserRuleContext(self, 'whenValueMatch_whenValueMatchSimple', parent) as current:
            self.atomic(parent=current)
            return current
    whenValueMatch_whenValueMatchSimple.min_size = RuleSize(4, 1)

    def whenValueMatch_whenValueMatchThrough(self, parent=None):
        with UnparserRuleContext(self, 'whenValueMatch_whenValueMatchThrough', parent) as current:
            self._reserve(2, self.atomic, parent=current)
            self._reserve(1, self.T__43, parent=current)
            self.atomic(parent=current)
            return current
    whenValueMatch_whenValueMatchThrough.min_size = RuleSize(4, 3)

    def T__43(self, parent=None):
        with UnlexerRuleContext(self, 'T__43', parent) as current:
            current.src += 'THROUGH'
            return current
    T__43.min_size = RuleSize(0, 0)

    def T__44(self, parent=None):
        with UnlexerRuleContext(self, 'T__44', parent) as current:
            current.src += 'IF'
            return current
    T__44.min_size = RuleSize(0, 0)

    def T__45(self, parent=None):
        with UnlexerRuleContext(self, 'T__45', parent) as current:
            current.src += 'THEN'
            return current
    T__45.min_size = RuleSize(0, 0)

    def T__46(self, parent=None):
        with UnlexerRuleContext(self, 'T__46', parent) as current:
            current.src += 'ELSE'
            return current
    T__46.min_size = RuleSize(0, 0)

    def T__47(self, parent=None):
        with UnlexerRuleContext(self, 'T__47', parent) as current:
            current.src += 'LOOP'
            return current
    T__47.min_size = RuleSize(0, 0)

    def T__48(self, parent=None):
        with UnlexerRuleContext(self, 'T__48', parent) as current:
            current.src += 'VARYING'
            return current
    T__48.min_size = RuleSize(0, 0)

    def T__49(self, parent=None):
        with UnlexerRuleContext(self, 'T__49', parent) as current:
            current.src += 'WHILE'
            return current
    T__49.min_size = RuleSize(0, 0)

    def T__50(self, parent=None):
        with UnlexerRuleContext(self, 'T__50', parent) as current:
            current.src += 'UNTIL'
            return current
    T__50.min_size = RuleSize(0, 0)

    def loopStm_loopStmVar(self, parent=None):
        with UnparserRuleContext(self, 'loopStm_loopStmVar', parent) as current:
            self.loopStmVarying(parent=current)
            return current
    loopStm_loopStmVar.min_size = RuleSize(2, 1)

    def loopStm_loopStmWhl(self, parent=None):
        with UnparserRuleContext(self, 'loopStm_loopStmWhl', parent) as current:
            self.loopStmWhile(parent=current)
            return current
    loopStm_loopStmWhl.min_size = RuleSize(6, 2)

    def loopStm_loopStmUtl(self, parent=None):
        with UnparserRuleContext(self, 'loopStm_loopStmUtl', parent) as current:
            self.loopStmUntil(parent=current)
            return current
    loopStm_loopStmUtl.min_size = RuleSize(6, 2)

    def loopStm_loopStmStm(self, parent=None):
        with UnparserRuleContext(self, 'loopStm_loopStmStm', parent) as current:
            self.statement(parent=current)
            return current
    loopStm_loopStmStm.min_size = RuleSize(3, 1)

    def signal_signalOff(self, parent=None):
        with UnparserRuleContext(self, 'signal_signalOff', parent) as current:
            self._reserve(3, self.T__51, parent=current)
            self._reserve(2, self.T__52, parent=current)
            self._reserve(1, self.T__53, parent=current)
            self.T__54(parent=current)
            return current
    signal_signalOff.min_size = RuleSize(1, 4)

    def T__51(self, parent=None):
        with UnlexerRuleContext(self, 'T__51', parent) as current:
            current.src += 'SIGNAL'
            return current
    T__51.min_size = RuleSize(0, 0)

    def T__52(self, parent=None):
        with UnlexerRuleContext(self, 'T__52', parent) as current:
            current.src += 'OFF'
            return current
    T__52.min_size = RuleSize(0, 0)

    def T__53(self, parent=None):
        with UnlexerRuleContext(self, 'T__53', parent) as current:
            current.src += 'ON'
            return current
    T__53.min_size = RuleSize(0, 0)

    def T__54(self, parent=None):
        with UnlexerRuleContext(self, 'T__54', parent) as current:
            current.src += 'ERROR'
            return current
    T__54.min_size = RuleSize(0, 0)

    def signal_signalNormal(self, parent=None):
        with UnparserRuleContext(self, 'signal_signalNormal', parent) as current:
            self._reserve(3, self.T__51, parent=current)
            self._reserve(2, self.WORD, parent=current)
            self._reserve(1, self.T__53, parent=current)
            self.T__54(parent=current)
            return current
    signal_signalNormal.min_size = RuleSize(1, 4)

    def anyExpr_anyExprArith(self, parent=None):
        with UnparserRuleContext(self, 'anyExpr_anyExprArith', parent) as current:
            self.arithExpr(parent=current)
            return current
    anyExpr_anyExprArith.min_size = RuleSize(10, 1)

    def anyExpr_anyExprStr(self, parent=None):
        with UnparserRuleContext(self, 'anyExpr_anyExprStr', parent) as current:
            self.stringExpr(parent=current)
            return current
    anyExpr_anyExprStr.min_size = RuleSize(8, 1)

    def anyExpr_anyExprBool(self, parent=None):
        with UnparserRuleContext(self, 'anyExpr_anyExprBool', parent) as current:
            self.booleanExpr(parent=current)
            return current
    anyExpr_anyExprBool.min_size = RuleSize(5, 1)

    def booleanExpr_boolTerm(self, parent=None):
        with UnparserRuleContext(self, 'booleanExpr_boolTerm', parent) as current:
            self.booleanTerm(parent=current)
            return current
    booleanExpr_boolTerm.min_size = RuleSize(3, 1)

    def booleanExpr_boolExprTermContracted(self, parent=None):
        with UnparserRuleContext(self, 'booleanExpr_boolExprTermContracted', parent) as current:
            self.termContractedBooleanExpr(parent=current)
            return current
    booleanExpr_boolExprTermContracted.min_size = RuleSize(12, 1)

    def booleanExpr_boolExprCompareContracted(self, parent=None):
        with UnparserRuleContext(self, 'booleanExpr_boolExprCompareContracted', parent) as current:
            self.operatorContractedBooleanExpr(parent=current)
            return current
    booleanExpr_boolExprCompareContracted.min_size = RuleSize(14, 2)

    def booleanExpr_boolExprCompare(self, parent=None):
        with UnparserRuleContext(self, 'booleanExpr_boolExprCompare', parent) as current:
            self._reserve(2, self.arithExpr, parent=current)
            self.operatorContractedBooleanExpr(parent=current)
            return current
    booleanExpr_boolExprCompare.min_size = RuleSize(14, 3)

    def booleanExpr_boolExprNot(self, parent=None):
        with UnparserRuleContext(self, 'booleanExpr_boolExprNot', parent) as current:
            self._reserve(1, self.T__55, parent=current)
            self.booleanExpr(parent=current)
            return current
    booleanExpr_boolExprNot.min_size = RuleSize(5, 2)

    def T__55(self, parent=None):
        with UnlexerRuleContext(self, 'T__55', parent) as current:
            current.src += 'NOT'
            return current
    T__55.min_size = RuleSize(0, 0)

    def booleanExpr_boolExprAnd(self, parent=None):
        with UnparserRuleContext(self, 'booleanExpr_boolExprAnd', parent) as current:
            self._reserve(2, self.booleanExpr, parent=current)
            self._reserve(1, self.T__56, parent=current)
            self.booleanExpr(parent=current)
            return current
    booleanExpr_boolExprAnd.min_size = RuleSize(5, 3)

    def T__56(self, parent=None):
        with UnlexerRuleContext(self, 'T__56', parent) as current:
            current.src += 'AND'
            return current
    T__56.min_size = RuleSize(0, 0)

    def booleanExpr_boolExprXor(self, parent=None):
        with UnparserRuleContext(self, 'booleanExpr_boolExprXor', parent) as current:
            self._reserve(2, self.booleanExpr, parent=current)
            self._reserve(1, self.T__57, parent=current)
            self.booleanExpr(parent=current)
            return current
    booleanExpr_boolExprXor.min_size = RuleSize(5, 3)

    def T__57(self, parent=None):
        with UnlexerRuleContext(self, 'T__57', parent) as current:
            current.src += 'XOR'
            return current
    T__57.min_size = RuleSize(0, 0)

    def booleanExpr_boolExprOr(self, parent=None):
        with UnparserRuleContext(self, 'booleanExpr_boolExprOr', parent) as current:
            self._reserve(2, self.booleanExpr, parent=current)
            self._reserve(1, self.T__58, parent=current)
            self.booleanExpr(parent=current)
            return current
    booleanExpr_boolExprOr.min_size = RuleSize(5, 3)

    def T__58(self, parent=None):
        with UnlexerRuleContext(self, 'T__58', parent) as current:
            current.src += 'OR'
            return current
    T__58.min_size = RuleSize(0, 0)

    def operatorContractedBooleanExpr_boolExprOperatorTerm(self, parent=None):
        with UnparserRuleContext(self, 'operatorContractedBooleanExpr_boolExprOperatorTerm', parent) as current:
            self.termOperatorContractedBooleanExpr(parent=current)
            return current
    operatorContractedBooleanExpr_boolExprOperatorTerm.min_size = RuleSize(12, 2)

    def operatorContractedBooleanExpr_boolExprOperatorNot(self, parent=None):
        with UnparserRuleContext(self, 'operatorContractedBooleanExpr_boolExprOperatorNot', parent) as current:
            self._reserve(2, self.T__55, parent=current)
            self.operatorContractedBooleanExpr(parent=current)
            return current
    operatorContractedBooleanExpr_boolExprOperatorNot.min_size = RuleSize(14, 3)

    def termOperatorContractedBooleanExpr_boolExprOperatorEQ(self, parent=None):
        with UnparserRuleContext(self, 'termOperatorContractedBooleanExpr_boolExprOperatorEQ', parent) as current:
            self._reserve(1, self.T__59, parent=current)
            self.arithExpr(parent=current)
            return current
    termOperatorContractedBooleanExpr_boolExprOperatorEQ.min_size = RuleSize(10, 2)

    def T__59(self, parent=None):
        with UnlexerRuleContext(self, 'T__59', parent) as current:
            current.src += '='
            return current
    T__59.min_size = RuleSize(0, 0)

    def termOperatorContractedBooleanExpr_boolExprOperatorLT(self, parent=None):
        with UnparserRuleContext(self, 'termOperatorContractedBooleanExpr_boolExprOperatorLT', parent) as current:
            self._reserve(1, self.T__60, parent=current)
            self.arithExpr(parent=current)
            return current
    termOperatorContractedBooleanExpr_boolExprOperatorLT.min_size = RuleSize(10, 2)

    def T__60(self, parent=None):
        with UnlexerRuleContext(self, 'T__60', parent) as current:
            current.src += '<'
            return current
    T__60.min_size = RuleSize(0, 0)

    def termOperatorContractedBooleanExpr_boolExprOperatorLE(self, parent=None):
        with UnparserRuleContext(self, 'termOperatorContractedBooleanExpr_boolExprOperatorLE', parent) as current:
            self._reserve(1, self.T__61, parent=current)
            self.arithExpr(parent=current)
            return current
    termOperatorContractedBooleanExpr_boolExprOperatorLE.min_size = RuleSize(10, 2)

    def T__61(self, parent=None):
        with UnlexerRuleContext(self, 'T__61', parent) as current:
            current.src += '<='
            return current
    T__61.min_size = RuleSize(0, 0)

    def termOperatorContractedBooleanExpr_boolExprOperatorGT(self, parent=None):
        with UnparserRuleContext(self, 'termOperatorContractedBooleanExpr_boolExprOperatorGT', parent) as current:
            self._reserve(1, self.T__62, parent=current)
            self.arithExpr(parent=current)
            return current
    termOperatorContractedBooleanExpr_boolExprOperatorGT.min_size = RuleSize(10, 2)

    def T__62(self, parent=None):
        with UnlexerRuleContext(self, 'T__62', parent) as current:
            current.src += '>'
            return current
    T__62.min_size = RuleSize(0, 0)

    def termOperatorContractedBooleanExpr_boolExprOperatorGE(self, parent=None):
        with UnparserRuleContext(self, 'termOperatorContractedBooleanExpr_boolExprOperatorGE', parent) as current:
            self._reserve(1, self.T__63, parent=current)
            self.arithExpr(parent=current)
            return current
    termOperatorContractedBooleanExpr_boolExprOperatorGE.min_size = RuleSize(10, 2)

    def T__63(self, parent=None):
        with UnlexerRuleContext(self, 'T__63', parent) as current:
            current.src += '>='
            return current
    T__63.min_size = RuleSize(0, 0)

    def termContractedBooleanExpr_boolExprContractedTerm(self, parent=None):
        with UnparserRuleContext(self, 'termContractedBooleanExpr_boolExprContractedTerm', parent) as current:
            self.arithExpr(parent=current)
            return current
    termContractedBooleanExpr_boolExprContractedTerm.min_size = RuleSize(10, 1)

    def termContractedBooleanExpr_boolExprContractedNot(self, parent=None):
        with UnparserRuleContext(self, 'termContractedBooleanExpr_boolExprContractedNot', parent) as current:
            self._reserve(1, self.T__55, parent=current)
            self.termContractedBooleanExpr(parent=current)
            return current
    termContractedBooleanExpr_boolExprContractedNot.min_size = RuleSize(12, 2)

    def booleanTerm_boolTermTrue(self, parent=None):
        with UnparserRuleContext(self, 'booleanTerm_boolTermTrue', parent) as current:
            self.T__64(parent=current)
            return current
    booleanTerm_boolTermTrue.min_size = RuleSize(1, 1)

    def T__64(self, parent=None):
        with UnlexerRuleContext(self, 'T__64', parent) as current:
            current.src += 'TRUE'
            return current
    T__64.min_size = RuleSize(0, 0)

    def booleanTerm_boolTermFalse(self, parent=None):
        with UnparserRuleContext(self, 'booleanTerm_boolTermFalse', parent) as current:
            self.T__65(parent=current)
            return current
    booleanTerm_boolTermFalse.min_size = RuleSize(1, 1)

    def T__65(self, parent=None):
        with UnlexerRuleContext(self, 'T__65', parent) as current:
            current.src += 'FALSE'
            return current
    T__65.min_size = RuleSize(0, 0)

    def booleanTerm_boolTermParens(self, parent=None):
        with UnparserRuleContext(self, 'booleanTerm_boolTermParens', parent) as current:
            self._reserve(2, self.T__66, parent=current)
            self._reserve(1, self.booleanExpr, parent=current)
            self.T__67(parent=current)
            return current
    booleanTerm_boolTermParens.min_size = RuleSize(5, 3)

    def T__66(self, parent=None):
        with UnlexerRuleContext(self, 'T__66', parent) as current:
            current.src += '('
            return current
    T__66.min_size = RuleSize(0, 0)

    def T__67(self, parent=None):
        with UnlexerRuleContext(self, 'T__67', parent) as current:
            current.src += ')'
            return current
    T__67.min_size = RuleSize(0, 0)

    def arithExpr_arithExprSub(self, parent=None):
        with UnparserRuleContext(self, 'arithExpr_arithExprSub', parent) as current:
            self.arithSubExpr(parent=current)
            return current
    arithExpr_arithExprSub.min_size = RuleSize(8, 1)

    def arithExpr_arithExprPow(self, parent=None):
        with UnparserRuleContext(self, 'arithExpr_arithExprPow', parent) as current:
            self._reserve(2, self.arithExpr, parent=current)
            self._reserve(1, self.T__68, parent=current)
            self.arithExpr(parent=current)
            return current
    arithExpr_arithExprPow.min_size = RuleSize(10, 3)

    def T__68(self, parent=None):
        with UnlexerRuleContext(self, 'T__68', parent) as current:
            current.src += '**'
            return current
    T__68.min_size = RuleSize(0, 0)

    def arithExpr_arithExprPlus(self, parent=None):
        with UnparserRuleContext(self, 'arithExpr_arithExprPlus', parent) as current:
            self._reserve(2, self.arithExpr, parent=current)
            self._reserve(1, self.T__69, parent=current)
            self.arithExpr(parent=current)
            return current
    arithExpr_arithExprPlus.min_size = RuleSize(10, 3)

    def T__69(self, parent=None):
        with UnlexerRuleContext(self, 'T__69', parent) as current:
            current.src += '+'
            return current
    T__69.min_size = RuleSize(0, 0)

    def arithExpr_arithExprMinus(self, parent=None):
        with UnparserRuleContext(self, 'arithExpr_arithExprMinus', parent) as current:
            self._reserve(2, self.arithExpr, parent=current)
            self._reserve(1, self.T__70, parent=current)
            self.arithExpr(parent=current)
            return current
    arithExpr_arithExprMinus.min_size = RuleSize(10, 3)

    def T__70(self, parent=None):
        with UnlexerRuleContext(self, 'T__70', parent) as current:
            current.src += '-'
            return current
    T__70.min_size = RuleSize(0, 0)

    def arithSubExpr_arithExprTerm(self, parent=None):
        with UnparserRuleContext(self, 'arithSubExpr_arithExprTerm', parent) as current:
            self.arithTerm(parent=current)
            return current
    arithSubExpr_arithExprTerm.min_size = RuleSize(6, 1)

    def arithSubExpr_arithExprMult(self, parent=None):
        with UnparserRuleContext(self, 'arithSubExpr_arithExprMult', parent) as current:
            self._reserve(2, self.arithSubExpr, parent=current)
            self._reserve(1, self.T__71, parent=current)
            self.arithSubExpr(parent=current)
            return current
    arithSubExpr_arithExprMult.min_size = RuleSize(8, 3)

    def T__71(self, parent=None):
        with UnlexerRuleContext(self, 'T__71', parent) as current:
            current.src += '*'
            return current
    T__71.min_size = RuleSize(0, 0)

    def arithSubExpr_arithExprDiv(self, parent=None):
        with UnparserRuleContext(self, 'arithSubExpr_arithExprDiv', parent) as current:
            self._reserve(2, self.arithSubExpr, parent=current)
            self._reserve(1, self.T__72, parent=current)
            self.arithSubExpr(parent=current)
            return current
    arithSubExpr_arithExprDiv.min_size = RuleSize(8, 3)

    def T__72(self, parent=None):
        with UnlexerRuleContext(self, 'T__72', parent) as current:
            current.src += '/'
            return current
    T__72.min_size = RuleSize(0, 0)

    def arithTerm_arithTermAtomic(self, parent=None):
        with UnparserRuleContext(self, 'arithTerm_arithTermAtomic', parent) as current:
            self.atomic(parent=current)
            return current
    arithTerm_arithTermAtomic.min_size = RuleSize(4, 1)

    def arithTerm_arithTermParens(self, parent=None):
        with UnparserRuleContext(self, 'arithTerm_arithTermParens', parent) as current:
            self._reserve(2, self.T__66, parent=current)
            self._reserve(1, self.arithExpr, parent=current)
            self.T__67(parent=current)
            return current
    arithTerm_arithTermParens.min_size = RuleSize(10, 3)

    def stringExpr_stringExprTerm(self, parent=None):
        with UnparserRuleContext(self, 'stringExpr_stringExprTerm', parent) as current:
            self.stringTerm(parent=current)
            return current
    stringExpr_stringExprTerm.min_size = RuleSize(6, 1)

    def stringExpr_stringExprPlus(self, parent=None):
        with UnparserRuleContext(self, 'stringExpr_stringExprPlus', parent) as current:
            self._reserve(2, self.stringExpr, parent=current)
            self._reserve(1, self.T__69, parent=current)
            self.stringExpr(parent=current)
            return current
    stringExpr_stringExprPlus.min_size = RuleSize(8, 3)

    def stringTerm_stringTermAtomic(self, parent=None):
        with UnparserRuleContext(self, 'stringTerm_stringTermAtomic', parent) as current:
            self.atomic(parent=current)
            return current
    stringTerm_stringTermAtomic.min_size = RuleSize(4, 1)

    def stringTerm_stringTermParens(self, parent=None):
        with UnparserRuleContext(self, 'stringTerm_stringTermParens', parent) as current:
            self._reserve(2, self.T__66, parent=current)
            self._reserve(1, self.stringExpr, parent=current)
            self.T__67(parent=current)
            return current
    stringTerm_stringTermParens.min_size = RuleSize(8, 3)

    def T__73(self, parent=None):
        with UnlexerRuleContext(self, 'T__73', parent) as current:
            current.src += 'MOVE'
            return current
    T__73.min_size = RuleSize(0, 0)

    def T__74(self, parent=None):
        with UnlexerRuleContext(self, 'T__74', parent) as current:
            current.src += 'HIGH-VALUES'
            return current
    T__74.min_size = RuleSize(0, 0)

    def T__75(self, parent=None):
        with UnlexerRuleContext(self, 'T__75', parent) as current:
            current.src += 'LOW-VALUES'
            return current
    T__75.min_size = RuleSize(0, 0)

    def T__76(self, parent=None):
        with UnlexerRuleContext(self, 'T__76', parent) as current:
            current.src += 'SPACES'
            return current
    T__76.min_size = RuleSize(0, 0)

    def T__77(self, parent=None):
        with UnlexerRuleContext(self, 'T__77', parent) as current:
            current.src += 'PERFORM'
            return current
    T__77.min_size = RuleSize(0, 0)

    def atomic_atomicLiteral(self, parent=None):
        with UnparserRuleContext(self, 'atomic_atomicLiteral', parent) as current:
            self.anyLiteral(parent=current)
            return current
    atomic_atomicLiteral.min_size = RuleSize(3, 1)

    def atomic_atomicIdent(self, parent=None):
        with UnparserRuleContext(self, 'atomic_atomicIdent', parent) as current:
            self.identifier(parent=current)
            return current
    atomic_atomicIdent.min_size = RuleSize(2, 1)

    def anyLiteral_literalNum(self, parent=None):
        with UnparserRuleContext(self, 'anyLiteral_literalNum', parent) as current:
            self.NUM_LITERAL(parent=current)
            return current
    anyLiteral_literalNum.min_size = RuleSize(1, 1)

    def anyLiteral_literalStr(self, parent=None):
        with UnparserRuleContext(self, 'anyLiteral_literalStr', parent) as current:
            self.STR_LITERAL(parent=current)
            return current
    anyLiteral_literalStr.min_size = RuleSize(1, 1)

    def T__78(self, parent=None):
        with UnlexerRuleContext(self, 'T__78', parent) as current:
            current.src += 'OF'
            return current
    T__78.min_size = RuleSize(0, 0)

    def T__79(self, parent=None):
        with UnlexerRuleContext(self, 'T__79', parent) as current:
            current.src += '['
            return current
    T__79.min_size = RuleSize(0, 0)

    def T__80(self, parent=None):
        with UnlexerRuleContext(self, 'T__80', parent) as current:
            current.src += ']'
            return current
    T__80.min_size = RuleSize(0, 0)

    _default_rule = program

    _charsets = {
        0: list(itertools.chain.from_iterable([range(0x20, 0x7f)])),
        1: list(itertools.chain.from_iterable([range(0x2b, 0x2c), range(0x2d, 0x2e)])),
        2: list(itertools.chain.from_iterable([range(0x30, 0x3a)])),
        3: list(itertools.chain.from_iterable([range(0x2c, 0x2d), range(0x2e, 0x2f)])),
        4: list(itertools.chain.from_iterable([range(0x20, 0x22), range(0x23, 0x7f)])),
        5: list(itertools.chain.from_iterable([range(0x30, 0x3a), range(0x61, 0x7b)])),
        6: list(itertools.chain.from_iterable([range(0x2d, 0x2e), range(0x30, 0x3a), range(0x5f, 0x60), range(0x61, 0x7b)])),
        7: list(itertools.chain.from_iterable([range(0x20, 0x2e), range(0x2f, 0x7f)])),
    }
